;; This file was generated by wasmate.py, which is a script that converts
;; from the "flat" text assembly syntax emitted by LLVM into the s-expression
;; syntax expected by the spec repository.
;;
;; Note: this is a hack. A real toolchain will eventually be needed.
;;

(module
  (export "fadd64" $fadd64)
  (func $fadd64
    (param f64)
    (param f64)
    (result f64)
    (local f64 f64 f64)
    (set_local 2 (get_local 1))
    (set_local 3 (get_local 0))
    (set_local 4 (f64.add (get_local 3) (get_local 2)))
    (return (get_local 4))
  )
  (export "fsub64" $fsub64)
  (func $fsub64
    (param f64)
    (param f64)
    (result f64)
    (local f64 f64 f64)
    (set_local 2 (get_local 1))
    (set_local 3 (get_local 0))
    (set_local 4 (f64.sub (get_local 3) (get_local 2)))
    (return (get_local 4))
  )
  (export "fmul64" $fmul64)
  (func $fmul64
    (param f64)
    (param f64)
    (result f64)
    (local f64 f64 f64)
    (set_local 2 (get_local 1))
    (set_local 3 (get_local 0))
    (set_local 4 (f64.mul (get_local 3) (get_local 2)))
    (return (get_local 4))
  )
  (export "fdiv64" $fdiv64)
  (func $fdiv64
    (param f64)
    (param f64)
    (result f64)
    (local f64 f64 f64)
    (set_local 2 (get_local 1))
    (set_local 3 (get_local 0))
    (set_local 4 (f64.div (get_local 3) (get_local 2)))
    (return (get_local 4))
  )
  (export "fabs64" $fabs64)
  (func $fabs64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.abs (get_local 1)))
    (return (get_local 2))
  )
  (export "fneg64" $fneg64)
  (func $fneg64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.neg (get_local 1)))
    (return (get_local 2))
  )
  (export "copysign64" $copysign64)
  (func $copysign64
    (param f64)
    (param f64)
    (result f64)
    (local f64 f64 f64)
    (set_local 2 (get_local 1))
    (set_local 3 (get_local 0))
    (set_local 4 (f64.copysign (get_local 3) (get_local 2)))
    (return (get_local 4))
  )
  (export "sqrt64" $sqrt64)
  (func $sqrt64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.sqrt (get_local 1)))
    (return (get_local 2))
  )
  (export "ceil64" $ceil64)
  (func $ceil64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.ceil (get_local 1)))
    (return (get_local 2))
  )
  (export "floor64" $floor64)
  (func $floor64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.floor (get_local 1)))
    (return (get_local 2))
  )
  (export "trunc64" $trunc64)
  (func $trunc64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.trunc (get_local 1)))
    (return (get_local 2))
  )
  (export "nearest64" $nearest64)
  (func $nearest64
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.nearest (get_local 1)))
    (return (get_local 2))
  )
  (export "nearest64_via_rint" $nearest64_via_rint)
  (func $nearest64_via_rint
    (param f64)
    (result f64)
    (local f64 f64)
    (set_local 1 (get_local 0))
    (set_local 2 (f64.nearest (get_local 1)))
    (return (get_local 2))
  )
  (memory 0 0
    (segment 0
      ""
    )
  )
)
